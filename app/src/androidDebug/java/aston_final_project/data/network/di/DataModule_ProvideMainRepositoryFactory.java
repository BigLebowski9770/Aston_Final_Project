// Generated by Dagger (https://dagger.dev).
package com.kipreev.aston_final_project.data.network.di;

import com.kipreev.aston_final_project.data.network.api.CharacterApi;
import com.kipreev.aston_final_project.data.network.repo.MainRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideMainRepositoryFactory implements Factory<MainRepository> {
  private final DataModule module;

  private final Provider<CharacterApi> apiProvider;

  public DataModule_ProvideMainRepositoryFactory(DataModule module,
      Provider<CharacterApi> apiProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
  }

  @Override
  public MainRepository get() {
    return provideMainRepository(module, apiProvider.get());
  }

  public static DataModule_ProvideMainRepositoryFactory create(DataModule module,
      Provider<CharacterApi> apiProvider) {
    return new DataModule_ProvideMainRepositoryFactory(module, apiProvider);
  }

  public static MainRepository provideMainRepository(DataModule instance, CharacterApi api) {
    return Preconditions.checkNotNullFromProvides(instance.provideMainRepository(api));
  }
}
