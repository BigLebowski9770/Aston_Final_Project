// Generated by Dagger (https://dagger.dev).
package com.kipreev.aston_final_project.domain.di;

import com.kipreev.aston_final_project.data.network.repo.MainRepository;
import com.kipreev.aston_final_project.domain.characters.GetAllCharactersUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DomainModule_ProvideGetAllCharactersUseCaseFactory implements Factory<GetAllCharactersUseCase> {
  private final DomainModule module;

  private final Provider<MainRepository> mainRepositoryProvider;

  public DomainModule_ProvideGetAllCharactersUseCaseFactory(DomainModule module,
      Provider<MainRepository> mainRepositoryProvider) {
    this.module = module;
    this.mainRepositoryProvider = mainRepositoryProvider;
  }

  @Override
  public GetAllCharactersUseCase get() {
    return provideGetAllCharactersUseCase(module, mainRepositoryProvider.get());
  }

  public static DomainModule_ProvideGetAllCharactersUseCaseFactory create(DomainModule module,
      Provider<MainRepository> mainRepositoryProvider) {
    return new DomainModule_ProvideGetAllCharactersUseCaseFactory(module, mainRepositoryProvider);
  }

  public static GetAllCharactersUseCase provideGetAllCharactersUseCase(DomainModule instance,
      MainRepository mainRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetAllCharactersUseCase(mainRepository));
  }
}
