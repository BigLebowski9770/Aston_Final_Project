// Generated by Dagger (https://dagger.dev).
package com.kipreev.aston_final_project.di;

import com.kipreev.aston_final_project.data.network.api.CharacterApi;
import com.kipreev.aston_final_project.data.network.di.DataModule;
import com.kipreev.aston_final_project.data.network.di.DataModule_ProvideMainRepositoryFactory;
import com.kipreev.aston_final_project.data.network.di.DataModule_ProvidepApiClientFactory;
import com.kipreev.aston_final_project.data.network.repo.MainRepository;
import com.kipreev.aston_final_project.domain.characters.GetAllCharactersUseCase;
import com.kipreev.aston_final_project.domain.characters.GetCharacterInfoUseCase;
import com.kipreev.aston_final_project.domain.di.DomainModule;
import com.kipreev.aston_final_project.domain.di.DomainModule_ProvideCharacterInfoUseCaseFactory;
import com.kipreev.aston_final_project.domain.di.DomainModule_ProvideGetAllCharactersUseCaseFactory;
import com.kipreev.aston_final_project.presentation.activities.MainActivity;
import com.kipreev.aston_final_project.presentation.activities.MainActivity_MembersInjector;
import com.kipreev.aston_final_project.presentation.di.PresentationModule;
import com.kipreev.aston_final_project.presentation.di.PresentationModule_ProvideCharacterInfoViewModelFactory;
import com.kipreev.aston_final_project.presentation.di.PresentationModule_ProvideCharactersViewModelFactory;
import com.kipreev.aston_final_project.presentation.viewmodels.characters.CharacterInfoViewModel;
import com.kipreev.aston_final_project.presentation.viewmodels.characters.CharactersListViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent {
  private DaggerAppComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  public static final class Builder {
    private DataModule dataModule;

    private DomainModule domainModule;

    private PresentationModule presentationModule;

    private Builder() {
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }

    public Builder domainModule(DomainModule domainModule) {
      this.domainModule = Preconditions.checkNotNull(domainModule);
      return this;
    }

    public Builder presentationModule(PresentationModule presentationModule) {
      this.presentationModule = Preconditions.checkNotNull(presentationModule);
      return this;
    }

    public AppComponent build() {
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (domainModule == null) {
        this.domainModule = new DomainModule();
      }
      if (presentationModule == null) {
        this.presentationModule = new PresentationModule();
      }
      return new AppComponentImpl(dataModule, domainModule, presentationModule);
    }
  }

  private static final class AppComponentImpl implements AppComponent {
    private final AppComponentImpl appComponentImpl = this;

    private Provider<CharacterApi> providepApiClientProvider;

    private Provider<MainRepository> provideMainRepositoryProvider;

    private Provider<GetAllCharactersUseCase> provideGetAllCharactersUseCaseProvider;

    private Provider<CharactersListViewModel> provideCharactersViewModelProvider;

    private Provider<GetCharacterInfoUseCase> provideCharacterInfoUseCaseProvider;

    private Provider<CharacterInfoViewModel> provideCharacterInfoViewModelProvider;

    private AppComponentImpl(DataModule dataModuleParam, DomainModule domainModuleParam,
        PresentationModule presentationModuleParam) {

      initialize(dataModuleParam, domainModuleParam, presentationModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final DataModule dataModuleParam, final DomainModule domainModuleParam,
        final PresentationModule presentationModuleParam) {
      this.providepApiClientProvider = DoubleCheck.provider(DataModule_ProvidepApiClientFactory.create(dataModuleParam));
      this.provideMainRepositoryProvider = DoubleCheck.provider(DataModule_ProvideMainRepositoryFactory.create(dataModuleParam, providepApiClientProvider));
      this.provideGetAllCharactersUseCaseProvider = DoubleCheck.provider(DomainModule_ProvideGetAllCharactersUseCaseFactory.create(domainModuleParam, provideMainRepositoryProvider));
      this.provideCharactersViewModelProvider = DoubleCheck.provider(PresentationModule_ProvideCharactersViewModelFactory.create(presentationModuleParam, provideGetAllCharactersUseCaseProvider));
      this.provideCharacterInfoUseCaseProvider = DoubleCheck.provider(DomainModule_ProvideCharacterInfoUseCaseFactory.create(domainModuleParam, provideMainRepositoryProvider));
      this.provideCharacterInfoViewModelProvider = DoubleCheck.provider(PresentationModule_ProvideCharacterInfoViewModelFactory.create(presentationModuleParam, provideCharacterInfoUseCaseProvider));
    }

    @Override
    public void injectMainAcivity(MainActivity mainActivity) {
      injectMainActivity(mainActivity);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectCharactersListViewModel(instance, provideCharactersViewModelProvider.get());
      MainActivity_MembersInjector.injectCharacterInfoViewModel(instance, provideCharacterInfoViewModelProvider.get());
      return instance;
    }
  }
}
